{"version":3,"sources":["../source/index.js"],"names":["Path","Process","WorkerClient","Configuration","Log","FileSystem","Require","_createRequire","import","meta","url","main","pidPath","ensureDirSync","dirname","createPidFile","workerLogPath","worker","resolve","writeTo","module","useConfiguration","root","debug","ping","getIt","exit","error"],"mappings":"yDAAA,OAAO,wDAAP;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAASC,OAAT,QAAwB,kCAAxB;AACA,SAASC,YAAT,QAA6B,iCAA7B;;AAEA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA,SAASC,UAAT,QAA2B,sCAA3B;;AAEA,MAAMC,OAAO,GATbC,cAAc,CAACC,MAAM,CAACC,IAAP,CAAYC,GAAb,CASd;;AAEA,eAAeC,IAAf,GAAsB;;AAEpB,MAAI;;AAEF,QAAIC,OAAO,GAAG,yBAAd;AACAP,IAAAA,UAAU,CAACQ,aAAX,CAAyBb,IAAI,CAACc,OAAL,CAAaF,OAAb,CAAzB;;AAEAX,IAAAA,OAAO,CAACc,aAAR,CAAsBH,OAAtB,EAA+B,EAAE,cAAc,KAAhB,EAAuB,oBAAoB,KAA3C,EAA/B;;AAEA,QAAII,aAAa,GAAG,0BAApB;AACAX,IAAAA,UAAU,CAACQ,aAAX,CAAyBb,IAAI,CAACc,OAAL,CAAaE,aAAb,CAAzB;;AAEA,QAAIC,MAAM,GAAG,IAAIf,YAAJ,CAAiBI,OAAO,CAACY,OAAR,CAAgB,2BAAhB,CAAjB,CAAb;;AAEA,QAAI;;AAEFD,MAAAA,MAAM,CAACE,OAAP,CAAeH,aAAf;;AAEA,YAAMC,MAAM,CAACG,MAAP,CAAcC,gBAAd,CAA+BlB,aAAa,CAACmB,IAA7C,CAAN;;AAEAlB,MAAAA,GAAG,CAACmB,KAAJ,CAAU,EAAE,iBAAiBpB,aAAa,CAACmB,IAAjC,EAAV,EAAmD,sBAAnD;AACAlB,MAAAA,GAAG,CAACmB,KAAJ,CAAU,EAAE,QAAQ,MAAMN,MAAM,CAACO,IAAP,EAAhB,EAAV,EAA2C,oBAA3C;AACApB,MAAAA,GAAG,CAACmB,KAAJ,CAAW,kCAAiC,MAAMN,MAAM,CAACG,MAAP,CAAcK,KAAd,EAAsB,EAAxE;;AAED,KAVD,SAUU;AACR,YAAMR,MAAM,CAACS,IAAP,EAAN;AACD;;AAEF,GA1BD,CA0BE,OAAOC,KAAP,EAAc;AACdvB,IAAAA,GAAG,CAACuB,KAAJ,CAAUA,KAAV;AACD;;AAEF;;AAEDhB,IAAI","sourcesContent":["import '@virtualpatterns/mablung-source-map-support/install.js'\nimport Path from 'path'\nimport { Process } from '@virtualpatterns/mablung-process'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\n\nimport { Configuration } from './library/configuration.js'\nimport { Log } from './library/log.js'\nimport { FileSystem } from '@virtualpatterns/mablung-file-system'\n\nconst Require = __require\n\nasync function main() {\n\n  try {\n\n    let pidPath = './process/pid/index.pid'\n    FileSystem.ensureDirSync(Path.dirname(pidPath))\n\n    Process.createPidFile(pidPath, { 'handleExit': false, 'handleKillSignal': false })\n\n    let workerLogPath = './process/log/worker.log'\n    FileSystem.ensureDirSync(Path.dirname(workerLogPath))\n\n    let worker = new WorkerClient(Require.resolve('./library/worker/index.js'))\n\n    try {\n\n      worker.writeTo(workerLogPath)\n\n      await worker.module.useConfiguration(Configuration.root)\n\n      Log.debug({ 'configuration': Configuration.root }, 'configuration is ...')\n      Log.debug({ 'ping': await worker.ping() }, 'worker ping is ...')\n      Log.debug(`worker.module.getIt() returned ${await worker.module.getIt()}`)\n\n    } finally {\n      await worker.exit()\n    }\n\n  } catch (error) {\n    Log.error(error)\n  }\n\n}\n\nmain()"],"file":"index.js"}