{"version":3,"sources":["../source/index.js"],"names":["FileSystem","Path","Process","WorkerClient","Configuration","Log","Require","_createRequire","import","meta","url","main","pidPath","ensureDir","dirname","createPidFile","worker","resolve","module","useConfiguration","root","debug","ping","getIt","exit","error"],"mappings":"yDAAA,OAAO,qDAAP;AACA,SAASA,UAAT,QAA2B,sCAA3B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,OAAT,QAAwB,kCAAxB;AACA,SAASC,YAAT,QAA6B,iCAA7B;;AAEA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,GAAT,QAAoB,kBAApB;;AAEA,MAAMC,OAAO,GATbC,cAAc,CAACC,MAAM,CAACC,IAAP,CAAYC,GAAb,CASd;;AAEA,eAAeC,IAAf,GAAsB;;AAEpB,MAAI;;AAEF,QAAIC,OAAO,GAAG,yBAAd;AACA,UAAMZ,UAAU,CAACa,SAAX,CAAqBZ,IAAI,CAACa,OAAL,CAAaF,OAAb,CAArB,CAAN;;AAEAV,IAAAA,OAAO,CAACa,aAAR,CAAsBH,OAAtB,EAA+B,EAAE,cAAc,KAAhB,EAAuB,oBAAoB,KAA3C,EAA/B;;AAEA,QAAII,MAAM,GAAG,IAAIb,YAAJ,CAAiBG,OAAO,CAACW,OAAR,CAAgB,2BAAhB,CAAjB,CAAb;;AAEA,QAAI;;AAEF,YAAMD,MAAM,CAACE,MAAP,CAAcC,gBAAd,CAA+Bf,aAAa,CAACgB,IAA7C,CAAN;;AAEAf,MAAAA,GAAG,CAACgB,KAAJ,CAAU,EAAE,iBAAiBjB,aAAa,CAACgB,IAAjC,EAAV,EAAmD,sBAAnD;AACAf,MAAAA,GAAG,CAACgB,KAAJ,CAAU,EAAE,QAAQ,MAAML,MAAM,CAACM,IAAP,EAAhB,EAAV,EAA2C,oBAA3C;AACAjB,MAAAA,GAAG,CAACgB,KAAJ,CAAW,kCAAiC,MAAML,MAAM,CAACE,MAAP,CAAcK,KAAd,EAAsB,EAAxE;;AAED,KARD,SAQU;AACR,YAAMP,MAAM,CAACQ,IAAP,EAAN;AACD;;AAEF,GArBD,CAqBE,OAAOC,KAAP,EAAc;AACdpB,IAAAA,GAAG,CAACoB,KAAJ,CAAUA,KAAV;AACD;;AAEF;;AAEDd,IAAI","sourcesContent":["import '@virtualpatterns/mablung-source-map-support/install'\nimport { FileSystem } from '@virtualpatterns/mablung-file-system'\nimport Path from 'path'\nimport { Process } from '@virtualpatterns/mablung-process'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\n\nimport { Configuration } from './library/configuration.js'\nimport { Log } from './library/log.js'\n\nconst Require = __require\n\nasync function main() {\n\n  try {\n\n    let pidPath = './process/pid/index.pid'\n    await FileSystem.ensureDir(Path.dirname(pidPath))\n\n    Process.createPidFile(pidPath, { 'handleExit': false, 'handleKillSignal': false })\n\n    let worker = new WorkerClient(Require.resolve('./library/worker/index.js'))\n\n    try {\n\n      await worker.module.useConfiguration(Configuration.root)\n\n      Log.debug({ 'configuration': Configuration.root }, 'configuration is ...')\n      Log.debug({ 'ping': await worker.ping() }, 'worker ping is ...')\n      Log.debug(`worker.module.getIt() returned ${await worker.module.getIt()}`)\n\n    } finally {\n      await worker.exit()\n    }\n\n  } catch (error) {\n    Log.error(error)\n  }\n\n}\n\nmain()"],"file":"index.js"}